// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.5.0.0
//      SpecFlow Generator Version:3.5.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace DeckOfCardsTesting.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.5.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [TechTalk.SpecRun.FeatureAttribute("Req001 - ShuffleTheCards", Description="\tVerify if Shuffle the Cards API is working as expected\r\n\tSimple calculator for a" +
        "dding two numbers", SourceFile="Features\\ShuffleTheCards.feature", SourceLine=0)]
    public partial class Req001_ShuffleTheCardsFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "ShuffleTheCards.feature"
#line hidden
        
        [TechTalk.SpecRun.FeatureInitialize()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Req001 - ShuffleTheCards", "\tVerify if Shuffle the Cards API is working as expected\r\n\tSimple calculator for a" +
                    "dding two numbers", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [TechTalk.SpecRun.FeatureCleanup()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        [TechTalk.SpecRun.ScenarioCleanup()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void TC_ST_L1_ShuffleCards_P0001_AddValidDeck_CountAndOrJokers_EnabledQueryParametersToGetShuffledCards(string jokers_Enabled, string deck_Count, string success, string shuffled, string remaining, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Sanity",
                    "priority1"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("jokers_enabled", jokers_Enabled);
            argumentsOfScenario.Add("deck_count", deck_Count);
            argumentsOfScenario.Add("success", success);
            argumentsOfScenario.Add("shuffled", shuffled);
            argumentsOfScenario.Add("remaining", remaining);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("TC_ST_L1_ShuffleCards_P0001 - Add valid deck_count and/Or jokers_enabled query pa" +
                    "rameters to get shuffled cards", null, tagsOfScenario, argumentsOfScenario);
#line 6
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
testRunner.Given(string.Format("user shuffle {0} deck of cards with {1}", deck_Count, jokers_Enabled), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 8
testRunner.Then(string.Format("success should be {0}, shuffled should be {1}, remaining cards count should be {2" +
                            "}", success, shuffled, remaining), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("TC_ST_L1_ShuffleCards_P0001 - Add valid deck_count and/Or jokers_enabled query pa" +
            "rameters to get shuffled cards, Variant 0", new string[] {
                "Sanity",
                "priority1"}, SourceLine=10)]
        public virtual void TC_ST_L1_ShuffleCards_P0001_AddValidDeck_CountAndOrJokers_EnabledQueryParametersToGetShuffledCards_Variant0()
        {
#line 6
this.TC_ST_L1_ShuffleCards_P0001_AddValidDeck_CountAndOrJokers_EnabledQueryParametersToGetShuffledCards("True", "1", "True", "True", "54", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("TC_ST_L1_ShuffleCards_P0001 - Add valid deck_count and/Or jokers_enabled query pa" +
            "rameters to get shuffled cards, Variant 1", new string[] {
                "Sanity",
                "priority1"}, SourceLine=10)]
        public virtual void TC_ST_L1_ShuffleCards_P0001_AddValidDeck_CountAndOrJokers_EnabledQueryParametersToGetShuffledCards_Variant1()
        {
#line 6
this.TC_ST_L1_ShuffleCards_P0001_AddValidDeck_CountAndOrJokers_EnabledQueryParametersToGetShuffledCards("False", "1", "True", "True", "52", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("TC_ST_L1_ShuffleCards_P0001 - Add valid deck_count and/Or jokers_enabled query pa" +
            "rameters to get shuffled cards, Variant 2", new string[] {
                "Sanity",
                "priority1"}, SourceLine=10)]
        public virtual void TC_ST_L1_ShuffleCards_P0001_AddValidDeck_CountAndOrJokers_EnabledQueryParametersToGetShuffledCards_Variant2()
        {
#line 6
this.TC_ST_L1_ShuffleCards_P0001_AddValidDeck_CountAndOrJokers_EnabledQueryParametersToGetShuffledCards("False", "6", "True", "True", "312", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("TC_ST_L1_ShuffleCards_P0001 - Add valid deck_count and/Or jokers_enabled query pa" +
            "rameters to get shuffled cards, Variant 3", new string[] {
                "Sanity",
                "priority1"}, SourceLine=10)]
        public virtual void TC_ST_L1_ShuffleCards_P0001_AddValidDeck_CountAndOrJokers_EnabledQueryParametersToGetShuffledCards_Variant3()
        {
#line 6
this.TC_ST_L1_ShuffleCards_P0001_AddValidDeck_CountAndOrJokers_EnabledQueryParametersToGetShuffledCards("", "0", "True", "True", "0", ((string[])(null)));
#line hidden
        }
    }
}
#pragma warning restore
#endregion
